
=== cloned_repo/sprint1_backend.md ===
Repository Loading and Structure Display
Goals:

    Load a GitHub repository.
    Display its structure with selectable files and folders.

Tasks:

    Backend:
        set up environment and create requirments file
        use fast api
        Create an API endpoint to clone a GitHub repository using GitPython.
        Create an API endpoint to extract the repository structure as a tree.
=== cloned_repo/docker-compose.yml ===
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
=== cloned_repo/sprint1_frontend.md ===
    Frontend:
        set up react application
        Implement a form for entering a GitHub URL.
        Display the repository structure as a tree view with checkboxes.
        Set all items as selected by default.

=== cloned_repo/backend/requirements.txt ===
fastapi
uvicorn
gitpython
=== cloned_repo/backend/main.py ===
from fastapi import FastAPI, HTTPException
import git
import os

app = FastAPI()

@app.post("/clone-repo/")
async def clone_repo(repo_url: str):
    repo_name = repo_url.split("/")[-1].replace(".git", "")
    if not os.path.exists(repo_name):
        git.Repo.clone_from(repo_url, repo_name)
    return {"message": f"Repository {repo_name} cloned successfully."}

def get_directory_structure(rootdir):
    """
    Creates a nested dictionary that represents the folder structure of rootdir.
    :param rootdir: Root directory to analyze
    :return: A dictionary representing the directory structure
    """
    dir_structure = {}

    for dirpath, dirnames, filenames in os.walk(rootdir):
        # Get the relative path from the root directory
        folder = os.path.relpath(dirpath, rootdir)
        # Start at the root of the structure
        subdir = dir_structure
        
        # Navigate to the correct subdirectory level in the structure
        if folder != '.':
            for part in folder.split(os.sep):
                subdir = subdir.setdefault(part, {})
        
        # Add subdirectories
        for dirname in dirnames:
            subdir[dirname] = {}
        
        # Add files
        for filename in filenames:
            subdir[filename] = None

    return dir_structure

@app.get("/repo-structure/")
async def repo_structure(repo_name: str):
    if not os.path.exists(repo_name):
        raise HTTPException(status_code=404, detail="Repository not found")
    structure = get_directory_structure(repo_name)
    return structure
=== cloned_repo/frontend/public/robots.txt ===
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

=== cloned_repo/frontend/public/manifest.json ===
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

=== cloned_repo/frontend/public/index.html ===
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

=== cloned_repo/frontend/src/App.js ===
import React, { useState } from 'react';
import GitHubForm from './GitHubForm';
import RepoTreeView from './RepoTreeView';

const App = () => {
    const [nodes, setNodes] = useState([]);
    const [error, setError] = useState(null);

    const handleFormSubmit = async (url) => {
        try {
            // Hardcoded sample directory structure
            const sampleNodes = [
                {
                    value: 'src',
                    label: 'src',
                    children: [
                        {
                            value: 'components',
                            label: 'components',
                            children: [
                                { value: 'GitHubForm.js', label: 'GitHubForm.js' },
                                { value: 'RepoTreeView.js', label: 'RepoTreeView.js' }
                            ]
                        },
                        { value: 'App.js', label: 'App.js' },
                        { value: 'index.js', label: 'index.js' }
                    ]
                },
                { value: 'package.json', label: 'package.json' },
                { value: 'README.md', label: 'README.md' }
            ];
            setNodes(sampleNodes);
        } catch (error) {
            console.error('Error:', error);
            setError(error.message);
        }
    };

    return (
        <div>
            <GitHubForm onSubmit={handleFormSubmit} />
            {error && <p style={{ color: 'red' }}>{error}</p>}
            <RepoTreeView nodes={nodes} />
        </div>
    );
};

export default App;
=== cloned_repo/frontend/src/setupTests.js ===
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

=== cloned_repo/frontend/src/index.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

=== cloned_repo/frontend/src/App.test.js ===
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

=== cloned_repo/frontend/src/GitHubForm.js ===
import React, { useState } from 'react';

const GitHubForm = ({ onSubmit }) => {
    const [url, setUrl] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit(url);
    };

    return (
        <form onSubmit={handleSubmit}>
            <input
                type="text"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                placeholder="Enter GitHub URL"
            />
            <button type="submit">Submit</button>
        </form>
    );
};

export default GitHubForm;
=== cloned_repo/frontend/src/reportWebVitals.js ===
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
